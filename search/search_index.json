{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geonexus","text":"<p>Python Boilerplate contains all the boilerplate you need to create a Python package.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://halieute.github.io/geonexus</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li>Process geospatial data</li> <li>Geospatial visualization with vector and raster data</li> <li>Heatmap</li> <li>Split map</li> <li>Time slider for time series spatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import geonexus\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geonexus.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geonexus/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/halieute/geonexus/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geonexus could always use more documentation, whether as part of the official geonexus docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/halieute/geonexus/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geonexus for local development.</p> <ol> <li> <p>Fork the geonexus repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geonexus.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geonexus\n$ cd geonexus/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geonexus tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/halieute/geonexus/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geonexus/","title":"geonexus module","text":"<p>Main module.</p>"},{"location":"geonexus/#geonexus.geonexus.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geonexus/geonexus.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str, optional): Basemap name. Defaults to \"OpenStreetMap\".\n        \"\"\"\n\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Add a Google Map to the map.\n\n        Args:\n            map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n        \"\"\"\n\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"HYBRID\": \"y\",\n            \"TERRAIN\": \"p\",\n        }\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add(layer)\n\n    def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n        \"\"\"\n        Add a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): Style applied when hovering over the layer. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"\n        Add a shapefile to the map.\n\n        Args:\n            data (str): The file path to the shapefile.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"\n        Add a GeoDataFrame to the map.\n\n        Args:\n            gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"\n        Add vector data to the map.\n\n        Args:\n            data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path (str), a GeoDataFrame, or a GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_shp(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type\")\n\n    def add_layer_control(self):\n        \"\"\"\n        Add a layer control widget to the map.\n\n        The layer control allows users to toggle the visibility of layers.\n        \"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(control)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Basemap name. Defaults to \"OpenStreetMap\".</p> <code>'OpenStreetMap'</code> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap to the map.\n\n    Args:\n        basemap (str, optional): Basemap name. Defaults to \"OpenStreetMap\".\n    \"\"\"\n\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add_layer(layer)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Add a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>geopandas.GeoDataFrame</code> <p>The GeoDataFrame to add.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"\n    Add a GeoDataFrame to the map.\n\n    Args:\n        gdf (geopandas.GeoDataFrame): The GeoDataFrame to add.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJSON data. Can be a file path (str) or a dictionary.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style applied when hovering over the layer. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n    \"\"\"\n    Add a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJSON data. Can be a file path (str) or a dictionary.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): Style applied when hovering over the layer. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Add a Google Map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Map type. Defaults to \"ROADMAP\".</p> <code>'ROADMAP'</code> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Add a Google Map to the map.\n\n    Args:\n        map_type (str, optional): Map type. Defaults to \"ROADMAP\".\n    \"\"\"\n\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"HYBRID\": \"y\",\n        \"TERRAIN\": \"p\",\n    }\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add(layer)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control widget to the map.</p> <p>The layer control allows users to toggle the visibility of layers.</p> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Add a layer control widget to the map.\n\n    The layer control allows users to toggle the visibility of layers.\n    \"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(control)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The file path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"\n    Add a shapefile to the map.\n\n    Args:\n        data (str): The file path to the shapefile.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"geonexus/#geonexus.geonexus.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, geopandas.GeoDataFrame, or dict</code> <p>The vector data. Can be a file path (str), a GeoDataFrame, or a GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>geonexus/geonexus.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"\n    Add vector data to the map.\n\n    Args:\n        data (str, geopandas.GeoDataFrame, or dict): The vector data. Can be a file path (str), a GeoDataFrame, or a GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_shp(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type\")\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geonexus, run this command in your terminal:</p> <pre><code>pip install geonexus\n</code></pre> <p>This is the preferred method to install geonexus, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geonexus from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/halieute/geonexus\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geonexus in a project:</p> <pre><code>import geonexus\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import geonexus\n</pre> import geonexus In\u00a0[2]: Copied! <pre>m = geonexus.Map()\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\nm.add_geojson(url)\nm\n</pre> m = geonexus.Map() url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" m.add_geojson(url) m Out[2]: In\u00a0[3]: Copied! <pre>m1 = geonexus.Map(center=[17, 8], zoom=5)\nm1.add_basemap(\"OpenTopoMap\")\nm1\n</pre> m1 = geonexus.Map(center=[17, 8], zoom=5) m1.add_basemap(\"OpenTopoMap\") m1 Out[3]: In\u00a0[4]: Copied! <pre>m2 = geonexus.Map(center=[17, 8], zoom=6)\nm2.add_google_map(\"Terrain\")\nm2\n</pre> m2 = geonexus.Map(center=[17, 8], zoom=6) m2.add_google_map(\"Terrain\") m2 Out[4]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/#creating-maps","title":"Creating  maps\u00b6","text":""},{"location":"examples/intro/#testing-basemaps","title":"Testing Basemaps\u00b6","text":""},{"location":"examples/intro/#testing-the-ipyleaflet-basemaps","title":"Testing the Ipyleaflet Basemaps\u00b6","text":""},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import geonexus\n</pre> import geonexus In\u00a0[2]: Copied! <pre>m = geonexus.Map()\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\nm.add_geojson(url)\nm\n</pre> m = geonexus.Map() url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" m.add_geojson(url) m Out[2]: In\u00a0[3]: Copied! <pre>import ipyleaflet\nfrom ipyleaflet import TileLayer\nfrom ipyleaflet import GeoJSON\nimport json\nimport geopandas as gpd\n</pre> import ipyleaflet from ipyleaflet import TileLayer from ipyleaflet import GeoJSON import json import geopandas as gpd In\u00a0[4]: Copied! <pre>m = ipyleaflet.Map(center=(20, 0), zoom=2)\nurl = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\"\ngdf = gpd.read_file(url)\ndata = gdf.__geo_interface__\ngj = GeoJSON(data=data)\nm.add_layer(gj)\n\nbounds = gdf.total_bounds\nm.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\nm\n</pre> m = ipyleaflet.Map(center=(20, 0), zoom=2) url = \"https://github.com/opengeos/datasets/releases/download/world/continents.geojson\" gdf = gpd.read_file(url) data = gdf.__geo_interface__ gj = GeoJSON(data=data) m.add_layer(gj)  bounds = gdf.total_bounds m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]]) m Out[4]: In\u00a0[5]: Copied! <pre>gdf.total_bounds\n</pre> gdf.total_bounds Out[5]: <pre>array([-179.99998854,  -89.        ,  179.99998854,   83.62360016])</pre> In\u00a0[6]: Copied! <pre>m.fit_bounds(\n    [\n        [gdf.total_bounds[1], gdf.total_bounds[0]],\n        [gdf.total_bounds[3], gdf.total_bounds[2]],\n    ]\n)\n</pre> m.fit_bounds(     [         [gdf.total_bounds[1], gdf.total_bounds[0]],         [gdf.total_bounds[3], gdf.total_bounds[2]],     ] )"},{"location":"examples/map/#create-interactive-map","title":"Create interactive map\u00b6","text":""}]}